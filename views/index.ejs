<!DOCTYPE html>

<html lang="en-us">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="author" content="Sam Bossley" />
    <meta name="description"
      content="A RESTful API built with Node.js and Sequelize" />
    <!-- meta keywords are not used in Google's search engine algorithm;
        however, they are confirmed in Baidu's search engine algorithm -->
    <meta name="keywords" content="rest, api, node, sequelize, javascript" />

    <title>
      <% if (currGame == "") { %>
        Leaderboards API
      <% } else { %>
        <%= currGame %> - Leaderboards API
      <% } %>
    </title>

    <link rel="stylesheet" type="text/css" href="/css/semantic.min.css" />
    <link rel="stylesheet" type="text/css" href="/css/dropdown.min.css" />
    <link rel="stylesheet" type="text/css" href="/css/search.min.css" />
    <link rel="stylesheet" type="text/css" href="/css/modal.min.css" />
    <link rel="stylesheet" type="text/css" href="/css/base.css" />

  </head>
  <body>

    <div id="javascript-warning-overlay"><div>
      <em>Note: This site relies on Javascript to make API calls and display
        content. Please enable Javascript before continuing.</em>
    </div></div>

    <!-- grid layout -->
    <div class="ui padded relaxed grid centered master">

      <!----------------------------------------------------------------------->
      <!-- HEADER ------------------------------------------------------------->
      <!----------------------------------------------------------------------->
      <header id="row-header" class="row column centered">
        <h1 class="ui icon header">
          <i class="globe icon"></i>
          <span class="content">
            Leaderboards
            <span class="sub header">
              A RESTful API built with Node.js and Sequelize
            </span>
          </span>
        </h1>
      </header>


      <!----------------------------------------------------------------------->
      <!-- GAME INPUT --------------------------------------------------------->
      <!----------------------------------------------------------------------->
      <div id="row-game" class="row centered">
        <div class="eight wide computer sixteen wide mobile column">

          <form id="form-game" class="ui form">
            <div class="inline fields">

              <div class="twelve wide computer sixteen wide mobile field">
                <div class="ui fluid search search-game sixteen wide field">

                  <label>Create new game:</label>
                  <input class="prompt" name="input-game" type="text"
                    autocomplete=off placeholder="Ex: Apex Legends">

                </div>
              </div>

              <div class="input-game-buttons field">
                <div class="ui buttons">
                  <button name="submit-createGame" onclick="this.active=true"
                    tabindex="0" class="ui positive button">Create Game</button>
                  <div class="or"></div>
                  <button name="submit-deleteGame" onclick="this.active=true"
                    class="ui button deleteGameButton" tabindex="0">
                    Delete selected game</button>
                </div>
              </div>

            </div>

            <div id="form-game-errors" class="ui error message"></div>
          </form>

        </div>
      </div>


      <!-- content row -->
      <div class="row column centered">

        <!--------------------------------------------------------------------->
        <!-- GAME SELECTION --------------------------------------------------->
        <!--------------------------------------------------------------------->
        <div class="eight wide computer sixteen wide mobile column">
          <div class="field">
            <label><b>Selected Game: </b></label>
            <select id="input-gameSelect"
              class="ui dropdown">
              <% if (gameList.length == 0) { %>

                <option value data-invalid=true
                  >Please create a game to continue</option>

              <% } else { %>

                <% for (var i = 0; i < gameList.length; i++) { %>
                  <% if (gameList[i] == currGame) { %>
                    <option value="<%= i+1 %>"
                      selected><%= gameList[i] %></option>
                  <% } else { %>
                    <option value="<%= i+1 %>"><%= gameList[i] %></option>
                  <% } %>
                <% } %>

              <% } %>

            </select>
          </div>

        </div>


        <br />
        <br />


        <!--------------------------------------------------------------------->
        <!-- DATA TABLE ------------------------------------------------------->
        <!--------------------------------------------------------------------->
        <div class="eight wide computer sixteen wide mobile column">
          <table class="ui padded very table">

            <thead>
              <tr>
                <th>Username</th>
                <th>Score</th>
                <th class="title-delete">Delete</th>
              </tr>
            </thead>

            <tbody>

              <% if (entryData.length > 0) { %>
                <% for (var i = 0; i < entryData.length; i++) { %>
                <tr>
                  <td class="entry-username">
                    <i class="user icon"></i><%= entryData[i].user_name %>
                  </td>
                  <td class="entry-score"><%= entryData[i].score %></td>
                  <td class="entry-delete collapsing center aligned"
                  tabindex="0">
                    <p>Delete</p>
                  </td>
                </tr>
                <% } %>
              <% } else { %>
                <tr>
                  <td colspan="3" class="warning center aligned">
                    <span>No scores for this game exist on record.</span>
                  </td>
                <tr>
              <% } %>



            </tbody>

            <tfoot>
              <tr><th colspan="3">

                <!------------------------------------------------------------->
                <!-- DATA INPUT ----------------------------------------------->
                <!------------------------------------------------------------->
                <form id="form-userScore" class="ui form">
                  <div class="inline fields">

                    <div class="seven wide field input-entry">
                      <div class="ui search fluid search-username
                        sixteen wide field">

                        <label>Username:</label>
                        <input class="prompt" name="input-user" type="text"
                          autocomplete=off placeholder="Ex: TheLegend27">

                      </div>
                    </div>

                    <div class="seven wide field input-entry">
                      <label>Score:</label>
                      <input name="input-score" type="number" autocomplete=off
                        placeholder="Ex: 1234">
                    </div>

                    <button name="submit-createUserScore"
                      class="ui positive button input-entry-button">
                      Add Score</button>

                  </div>
                  <div id="form-userScore-errors"
                    class="ui error message"></div>
                </form>

              </th></tr>
            </tfoot>

          </table>
        </div>


      </div>


      <!----------------------------------------------------------------------->
      <!-- FOOTER ------------------------------------------------------------->
      <!----------------------------------------------------------------------->
      <footer id="footer" class="row column center aligned">
        <div class="ui segment eight wide">

          <p><i class="github icon"></i><a tabindex="0" class="link"
            href="https://github.com/bossley9/leaderboard/">
            github.com/bossley9
          </a></p>

          <!-- modal activator -->
          <button id="destroy-tables" class="ui labeled icon button">
            <i class="trash icon"></i>
            Destroy Tables
          </button>

        </div>
      </footer>


    </div>


    <!------------------------------------------------------------------------->
    <!-- MODAL ---------------------------------------------------------------->
    <!------------------------------------------------------------------------->
    <div id="destroy-tables-modal" tabindex="-1" class="ui basic modal">
      <h3 class="ui icon header">
        <i class="trash icon"></i>
        <div class="content">Destroy all relevant table data</div>
      </h3>
      <div class="content ui grid centered">
        <br /><br />
        <p>WARNING: Once you make this change,
          you will not be able to recover data.</p>
        <p>Please press "confirm" to confirm this action.</p>
      </div>
      <div class="actions">
        <div tabindex="0" class="ui approve button">Cancel</div>
        <div tabindex="0" class="ui destroy-confirm deny button">Confirm</div>
      </div>
    </div>


    <script src="/js/jquery-3.3.1.min.js"></script>
    <script src="/js/semantic.min.js"></script>
    <script src="/js/dropdown.min.js"></script>
    <script src="/js/search.min.js"></script>
    <script src="/js/modal.min.js"></script>


    <script>

      // -----------------------------------------------------------------------
      // Accessibility
      // -----------------------------------------------------------------------

      // remove Javascript enabled warning
      var warning = document.getElementById("javascript-warning-overlay");
      warning.style.display = "none";

      // adjust font size(s)
      $('*').each(function() {
        if (parseInt( $(this).css("fontSize") ) < 14)
          $(this).css({ "font-size": "14px" });
      });

      // lock tabindices within modal
      var lockTabIndex = function() {
        var modalID = 'div#destroy-tables-modal';

        var lastFocusedElem = document.activeElement;
        var inputs = document.querySelectorAll(modalID + ' [tabindex="0"]');

        $(modalID).on('keydown', function(e) {
          var key = e.which || e.keyCode || 0;
          if (key === 9) {
            if (!e.shiftKey) { // TAB
              if (inputs[inputs.length - 1] === e.target) {
                e.preventDefault();
                inputs[0].focus();
              }
            }
            else { // SHIFT + TAB
              if (inputs[0] === e.target) {
                e.preventDefault();
                inputs[inputs.length - 1].focus();
              }
            }
          }
        });
      }

      // -----------------------------------------------------------------------
      // Semantic Ui
      // -----------------------------------------------------------------------

      /* custom form validator ensuring a game exists */
      $.fn.form.settings.rules.gameExists = function() {
        var gameExists = false;
        var gameSelect = document.getElementById("input-gameSelect");

        if (gameSelect.firstElementChild.dataset.invalid) {
          var form = document.getElementById("form-game").elements;
          // when creating a game it doesn't matter whether games exist or not
          if (form["submit-createGame"].active) gameExists = true;

        }
        else gameExists = true;

        return gameExists;
      }

      /* custom form validator ensuring (game != "") */
      $.fn.form.settings.rules.gameNonEmpty = function() {
        var gameNameLen = 0;
        var form = document.getElementById("form-game").elements;
        var inputGame = form["input-game"].value;
        // manually remove trailing whitespace
        inputGame = inputGame.replace(/^\s+|\s+$/gm,'');
        gameNameLen = inputGame.length;
        // when deleting a game the input game doesn't matter
        if (form["submit-deleteGame"].active) gameNameLen = 1;

        return gameNameLen;
      }
      /* form validation */
      $('#form-game').form({
        fields: {
          game: {
            identifier: "input-game",
            rules: [
              // need to manually trim starting and ending whitespace...
              {
                type: 'maxLength[40]',
                prompt: 'Game name must be less than 40 characters'
              },
              {
                type: 'gameExists',
                prompt: 'A game must exist in order to be deleted'
              },
              {
                type: 'gameNonEmpty',
                prompt: 'Game name cannot be empty'
              },
            ],
          }
        }
      });
      $('#form-userScore').form({
        fields: {
          username: {
            identifier: "input-user",
            rules: [
              // need to manually trim starting and ending whitespace...
              {
                type: 'empty',
                prompt: 'Username cannot be empty'
              },
              {
                type: 'minLength[3]',
                prompt: 'Username must be at least 3 characters',
              },
              {
                type: 'maxLength[20]',
                prompt: 'Username cannot be more than 20 characters',
              },
              {
                type: 'doesntContain[ ]',
                prompt: 'Username cannot contain spaces',
              },
            ],
          },
          score: {
            identifier: "input-score",
            rules: [
              {
                type: 'empty',
                prompt: 'Score cannot be empty'
              },
              {
                type: 'integer[0..4000000000]',
                prompt: 'Score must be an integer between 0 and 4000000000'
              },
              {
                type: 'gameExists',
                prompt: 'A game must exist in order to add a score value'
              },
            ],
          },
        }
      });

      /* username search list */
      var usernames = [];
      <% for (var u in userList) { %>
        usernames.push({ title: "<%= userList[u] %>" });
      <% } %>

      $('.search-username').search({
        source: usernames,
        minCharacters: 3,
        showNoResults: false,
      });

      /* game search list */
      var games = [];
      <% for (var g in gameList) { %>
        games.push({ title: "<%= gameList[g] %>" });
      <% } %>

      $('.search-game').search({
        source: games,
        minCharacters: 3,
        showNoResults: false,
      });

      // -----------------------------------------------------------------------
      // <Select> game change
      // -----------------------------------------------------------------------

      // prevent page from navigating to the same game every TAB
      var prevGameName = "";

      $('#input-gameSelect').dropdown({
        onShow: function() {
          var select = document.getElementById('input-gameSelect');
          prevGameName = select.options[select.selectedIndex].text;
        },
        onHide: function() {
          var select = document.getElementById('input-gameSelect');
          var gameName = select.options[select.selectedIndex].text;

          if (prevGameName != gameName)
            window.location = "/leaderboards/entries/" + gameName;
        },
      });

      // -----------------------------------------------------------------------
      // CREATE/DELETE game
      // -----------------------------------------------------------------------

      var gameFormNotSubmitted = true;
      $('#form-game').on('submit', function(event) {
        if (gameFormNotSubmitted) {
          gameFormNotSubmitted = false;

          var form = document.getElementById("form-game").elements;
          var inputGame = form["input-game"].value;
          // manually remove trailing whitespace
          inputGame = inputGame.replace(/^\s+|\s+$/gm,'');
          var gameSelect = document.getElementById("input-gameSelect");
          var currentGame = gameSelect.options[gameSelect.selectedIndex].text;
          var createGame = form["submit-createGame"];
          var deleteGame = form["submit-deleteGame"];

          // detect which form button was pressed

          if (createGame.active) {
            if( $('#form-game').form('is valid') ) {

              // unnecessary because of page reloading but kept for consistency
              createGame.active = false;

              $('#form-game').removeClass('success');

              $.ajax({
                type: 'POST',
                url: '/leaderboards/api/createGame',
                data: { game: inputGame },
                success: function(data) {
                  if (data.valid)
                    window.location = "/leaderboards/entries/" + data.game;
                },
              });

            }
          }

          else if (deleteGame.active) {

            deleteGame.active = false;

            // clear form and hide validation errors
            $('#form-game').form('clear');

            if (!gameSelect.firstElementChild.dataset.invalid) {

                $.ajax({
                  type: 'DELETE',
                  url: '/leaderboards/api/deleteGame',
                  data: { game: currentGame },
                  success: function(data) {
                    gameFormNotSubmitted = true;

                    if (data.valid && data.game.length > 0)
                      window.location = "/leaderboards/entries/";
                  },
                });

            }

          }

          // in case neither create nor delete buttons are detected, reset form
          else gameFormNotSubmitted = true;
        }

        return false;
      });

      // -----------------------------------------------------------------------
      // CREATE user/score
      // -----------------------------------------------------------------------

      var userScoreFormNotSubmitted = true;
      $('#form-userScore').on('submit', function(e) {
        if (userScoreFormNotSubmitted) {
          userScoreFormNotSubmitted = false;

          var form = document.getElementById("form-userScore").elements;
          var gameSelect = document.getElementById("input-gameSelect");
          var currentGame = gameSelect.options[gameSelect.selectedIndex].text;
          var username = form["input-user"].value;
          // manually remove trailing whitespace
          username = username.replace(/^\s+|\s+$/gm,'');
          var score = form["input-score"].value;

          if( $('#form-userScore').form('is valid') ) {
            if (!gameSelect.firstElementChild.dataset.invalid) {

              $.ajax({
                type: 'POST',
                url: '/leaderboards/api/createUserScore',
                data: {
                  game: currentGame,
                  username: username,
                  score: score,
                },
                success: function(data) {
                  userScoreFormNotSubmitted = true;

                  if (data.valid && data.user == username && data.score == score)
                    location.reload();
                },
              });

            }
          }
        }

        return false;
      });

      // -----------------------------------------------------------------------
      // DELETE user/score
      // -----------------------------------------------------------------------

      // accessibility

      $('td.entry-delete').keyup(function(event) {
        if (event.keyCode === 13) $(this).click();
      })

      // event

      $('td.entry-delete').on('click', function() {
        var gameSelect = document.getElementById("input-gameSelect");
        var currentGame = gameSelect.options[gameSelect.selectedIndex].text;
        var username = this.parentElement
          .getElementsByClassName("entry-username")[0].innerText;
        var score = this.parentElement
          .getElementsByClassName("entry-score")[0].innerText;

        $.ajax({
          type: 'DELETE',
          url: '/leaderboards/api/deleteUserScore',
          data: {
            game: currentGame,
            username: username,
            score: score,
          },
          success: function(data) {
            if (data.valid && data.score > 0) location.reload();
          },
        });

        return false;
      });

      // -----------------------------------------------------------------------
      // DESTROY tables
      // -----------------------------------------------------------------------

      // accessibility

      $("#destroy-tables-modal div.ui.approve.button").keyup(function(event) {
        if (event.keyCode === 13)
          $("#destroy-tables-modal div.ui.approve.button").click();
      });

      $("#destroy-tables-modal div.ui.destroy-confirm.deny.button")
      .keyup(function(event) {
        if (event.keyCode === 13)
          $("#destroy-tables-modal div.ui.destroy-confirm.deny.button").click();
      });

      // event

      $('button#destroy-tables').on('click', function() {
        // modal tabindex locking
        lockTabIndex();
        $('#destroy-tables-modal').modal({
          onApprove: function() {}, // cancelled
          onDeny: function() { // confirmed

            $.ajax({
              type: 'DELETE',
              url: '/leaderboards/api/destroy',
              data: {},
              success: function(data) {
                if (data.valid)
                  window.location = "/leaderboards/entries/";
              },
            });

          }
        }).modal('show');

        return false;
      });

    </script>
  </body>
</html>
